name: CI

on:
  push:
    branches:
      - master
      - prod
      - release/*
  pull_request:
    branches:
      - master
      - prod
      - release/*

jobs:
  integration-test:
    runs-on: ubuntu-latest
    # env:
    #   RUST_LOG: "info"
    timeout-minutes: 15
    strategy:
      matrix:
        rust:
          - 1.50.0

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust 1.50.0 toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.50.0
          override: true
          components: rustfmt, clippy

      - name: Install Node.js 14
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: yarn install
        run: yarn install

      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo target
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Compile plonkit (release-version)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-features --release

      - name: Universal setup
        run: target/release/plonkit setup --power 20 --srs_monomial_form keys/setup/setup_2^20.key

      - name: Compile circuit
        run: |
          cd test/circuits/poseidon/
          npx circom circuit.circom --r1cs --wasm --sym -v

      - name: Calculate witness using snarkjs
        run: |
          cd test/circuits/poseidon/
          npx snarkjs wc circuit.wasm input.json witness.wtns

      - name: Export verification key
        run: target/release/plonkit export-verification-key -m keys/setup/setup_2^20.key -c test/circuits/poseidon/circuit.r1cs -v test/circuits/poseidon/vk.bin

      - name: Generate verifier smart contract
        run: target/release/plonkit generate-verifier -v test/circuits/poseidon/vk.bin -s test/circuits/poseidon/verifier.sol

      - name: Prove with key_monomial_form
        run: target/release/plonkit prove -m keys/setup/setup_2^20.key -c test/circuits/poseidon/circuit.r1cs -w test/circuits/poseidon/witness.wtns -p test/circuits/poseidon/proof.bin -j test/circuits/poseidon/proof.json -i test/circuits/poseidon/public.json

      - name: Dump key_lagrange_form from key_monomial_form
        run: target/release/plonkit dump-lagrange -m keys/setup/setup_2^20.key -l keys/setup/setup_2^20_lagrange.key -c test/circuits/poseidon/circuit.r1cs

      - name: Prove with key_monomial_form & key_lagrange_form
        run: target/release/plonkit prove -m keys/setup/setup_2^20.key -l keys/setup/setup_2^20_lagrange.key -c test/circuits/poseidon/circuit.r1cs -w test/circuits/poseidon/witness.wtns -p test/circuits/poseidon/proof.bin -j test/circuits/poseidon/proof.json -i test/circuits/poseidon/public.json --overwrite

      - name: Verify proof
        run: target/release/plonkit verify -p test/circuits/poseidon/proof.bin -v test/circuits/poseidon/vk.bin

      - name: Verify via smart contract
        run: |
          cp test/circuits/poseidon/public.json test/contract/test/data/public.json
          cp test/circuits/poseidon/proof.json test/contract/test/data/proof.json
          cp test/circuits/poseidon/verifier.sol test/contract/contracts/verifier.sol
          cd test/contract
          yarn install
          npx hardhat test
